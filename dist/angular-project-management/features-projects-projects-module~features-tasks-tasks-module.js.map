{"version":3,"sources":["webpack:///./src/app/core/index.ts","webpack:///./src/app/core/shared-function.service.ts","webpack:///./src/app/features/contacts/shared/contact.service.ts","webpack:///./src/app/features/projects/shared/project.service.ts","webpack:///./src/app/features/projects/shared/project.ts","webpack:///./src/app/shared/models/managerModel.ts","webpack:///./src/app/shared/models/projectInfoModel.ts"],"names":[],"mappings":"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","file":"features-projects-projects-module~features-tasks-tasks-module.js","sourcesContent":["export { MainLayoutComponent } from './main-layout/main-layout.component';\nexport { Logger } from './logger/logger.service';\nexport { ToastService } from './toast/toast.service';\n\nexport { SharedFunctionService } from './shared-function.service';\n\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { stringify } from '@angular/core/src/util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedFunctionService {\n  constructor(private translate: TranslateService) { }\n  private getTranslationData(myKey: string) {\n    // let translation = \"\";\n    // let cTranslation = this.translate.get(myKey).subscribe(res => {\n    //   translation = res;\n    //   return translation;\n    // });\n\n    // this.translate.get('HOME.HELLO3', { value: 'world' }).subscribe((res: string) => {\n    //   console.log(res);\n    //   //=> 'hello world'\n    // });\n\n    return this.translate.get(myKey);\n  }\n  private getTranslatData(myKey: string, data: any) {\n    let tanslat = '';\n    return this.translate.get(myKey, data);\n    //   console.log(res);\n  }\n  public getTranslation(myKey: string): string {\n    let data: string = '';\n    this.getTranslationData(myKey).subscribe(res => data = res);\n    return data;\n  }\n  public getTranslationWithData(myKey: string, data: any): string {\n    let val: string = '';\n    this.getTranslatData(myKey, data).subscribe(res => val = res);\n    return val;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\n//import { environment } from '../../../../environments/environment';\n//import { Logger } from '../../../core/logger/logger.service';\nimport { environment } from '@env/environment';\nimport { Logger } from '@app/core';\nimport { ToastService } from '@app/core';\n\nimport { Contact } from './contact';\nimport { SharedFunctionService } from '../../../core';\nimport { managerModel } from '../../../shared/models/managerModel';\n\nconst httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json', 'TOKEN': environment.token })\n};\n\n@Injectable()\nexport class ContactService {\n    private baseUrl = environment.restApi;\n\n    private contactsUrl = `${this.baseUrl}Contacts`;\n    constructor(\n        private http: HttpClient,\n        private logger: Logger,\n        private sharedService: SharedFunctionService,\n        private toastService: ToastService) {\n        //   console.log('ggg')\n        //   console.log(this.sharedService.getTranslationWithData('HOME.HELLO3', { value: 'world' }));\n        //   console.log(this.sharedService.getTranslation('HOME.HELLO'));\n        //   this.logger.log('---environment---' + environment.production)\n    }\n\n\n    /** \n     * GET: get all contacts from the database \n     */\n    getContacts(): Observable<any> {\n        let UrlAction = this.contactsUrl;\n        if (environment.production)\n            UrlAction = this.contactsUrl + \"/All\";\n\n        this.logger.log(UrlAction);\n        return this.http\n            .get<Contact[]>(UrlAction, httpOptions)\n            .pipe(\n                tap(_ => this.notify(this.sharedService.getTranslation('CONTACT.GETCONTACTMSG'), 'GET')),\n                catchError(this.handleError('getContacts', 'GET'))\n            );\n\n    }\n\n    getProjectManager(): Observable<managerModel[]> {\n        let UrlAction = this.contactsUrl;\n        if (environment.production)\n            UrlAction = this.contactsUrl + \"/All\";\n\n        return this.http.get(UrlAction, httpOptions).pipe(\n            map((data: any[]) => data.map((item: any) => {\n                const model = new managerModel();\n                model.fullName = item.firstName + ' ' + item.lastName;\n                model.id = item.id;\n                return model;\n            }))\n        );\n    }\n\n    /** \n     * GET: get an existing contact from the database by an id \n     */\n    getContact(id: number): Observable<any> {\n        let UrlAction = this.contactsUrl;\n        if (environment.production)\n            UrlAction = this.contactsUrl + \"/Contact\";\n\n        // const url = `${this.contactsUrl}/${id}`;\n        const url = `${UrlAction}/${id}`;\n        return this.http\n            .get<Contact>(url, httpOptions)\n            .pipe(\n                tap(_ => this.notify(this.sharedService.getTranslationWithData('CONTACT.FEATCHCONTACTBYID', { id: id })\n                    , 'GET')),\n                catchError(this.handleError(`getContact id=${id}`, 'GET'))\n            );\n\n\n    }\n\n    /** \n     * POST: add a new contact to the database \n     */\n    addContact(contact: Contact): Observable<any> {\n        let UrlAction = this.contactsUrl;\n        if (environment.production)\n            UrlAction = this.contactsUrl + \"/Create\";\n\n        return this.http\n            .post<Contact>(UrlAction, contact, httpOptions)\n            .pipe(\n                tap((contact: Contact) => this.notify(this.sharedService.getTranslationWithData('CONTACT.ADD_CONTACT_MSG', { value: contact.id }), 'POST')),\n                catchError(this.handleError('addContact', 'POST'))\n            );\n    }\n\n    /** \n     * PUT: update an existing contact to the database \n     */\n    updateContact(contact: Contact): Observable<any> {\n        const id = typeof contact === 'number' ? contact : contact.id;\n        let UrlAction = this.contactsUrl;\n        if (environment.production) {\n            UrlAction = UrlAction = this.contactsUrl + \"/Update\";\n            UrlAction = `${UrlAction}/${id}`;\n        }\n\n        return this.http\n            .put(UrlAction, contact, httpOptions)\n            .pipe(\n                tap(_ => this.notify(this.sharedService.getTranslationWithData('CONTACT.UPDATE_CONTACT_MSG', { value: id }), 'PUT')),\n                catchError(this.handleError('updateContact', 'PUT'))\n            );\n    }\n\n    /** \n     * DELETE: delete an existing hero from the database \n     */\n    deleteContact(contact: Contact | number): Observable<any> {\n        const id = typeof contact === 'number' ? contact : contact.id;\n\n        let UrlAction = this.contactsUrl;\n        if (environment.production)\n            UrlAction = this.contactsUrl + \"/Remove\";\n\n        const url = `${UrlAction}/${id}`;\n        return this.http\n            .delete<Contact>(url, httpOptions)\n            .pipe(\n                tap(_ => this.notify(this.sharedService.getTranslationWithData('CONTACT.DELTE_CONTACT_MSG', { value: id }), 'DELETE')),\n                catchError(this.handleError('deleteContact', 'DELETE'))\n            );\n    }\n\n    /**\n     * Prepare an error handler for failed HTTP requests.\n     * That handler extracts the error message and logs it.\n     * It also adds the message to the errors$ observable to which the caller\n     * may listen and react.\n     * @param operation The name/description of the operation that failed\n     * @param method The HTTP method for the failed HTTP request\n     */\n    protected handleError(operation: string, method: string) {\n        return function errorHandler(res: HttpErrorResponse) {\n            this.logger.error(res);\n            const eMsg = res.message || '';\n            const error = `${this.entityNamePlural} ${operation} Error${\n                eMsg ? ': ' + eMsg : ''\n                }`;\n            this.notify(error, method);\n        }.bind(this);\n    }\n\n    protected notify(message: string, method: string) {\n        this.toastService.openSnackBar(message, method);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\n//import { environment } from '../../../../environments/environment';\n//import { Logger } from '../../../core/logger/logger.service';\nimport { environment } from '@env/environment';\nimport { Logger } from '@app/core';\nimport { ToastService } from '@app/core';\nimport { projectInfoModel } from '../../../shared/models/projectInfoModel';\nimport { Project } from './Project';\nimport { SharedFunctionService } from '../../../core/shared-function.service';\n\nconst httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json', 'TOKEN': environment.token })\n};\n\n@Injectable()\nexport class ProjectService {\n    private baseUrl = environment.restApi;\n    private projectsUrl = `${this.baseUrl}Projects`;\n\n    constructor(\n        private http: HttpClient,\n        private logger: Logger, private sharedService: SharedFunctionService,\n        private toastService: ToastService) {\n    }\n\n    /** \n     * GET: get all Projects from the database \n     */\n    getProjects(): Observable<any> {\n        let UrlAction = this.projectsUrl;\n        if (environment.production)\n            UrlAction = this.projectsUrl + \"/All\";\n\n        this.logger.log(UrlAction);\n        return this.http\n            .get<Project[]>(UrlAction, httpOptions)\n            .pipe(\n                tap(_ => this.notify(this.sharedService.getTranslation('PROJECT.GETPROJECTMSG'), 'GET')),\n                catchError(this.handleError(this.sharedService.getTranslation('PROJECT.GETPROJECTMSG'), 'GET'))\n            );\n\n\n    }\n\n\n    getProjectsInfo(): Observable<projectInfoModel[]> {\n        let UrlAction = this.projectsUrl;\n        if (environment.production)\n            UrlAction = this.projectsUrl + \"/All\";\n\n        return this.http.get(UrlAction, httpOptions).pipe(\n            map((data: any[]) => data.map((item: any) => {\n                const model = new projectInfoModel();\n                model.projectName = item.projectName\n                model.id = item.id;\n                return model;\n            }))\n        );\n    }\n\n\n    /** \n     * GET: get an existing Project from the database by an id \n     */\n    getProject(id: number): Observable<any> {\n        let UrlAction = this.projectsUrl;\n        if (environment.production)\n            UrlAction = this.projectsUrl + \"/Project\";\n\n        // const url = `${this.projectsUrl}/${id}`;\n        const url = `${UrlAction}/${id}`;\n\n\n        return this.http\n            .get<Project>(url, httpOptions)\n            .pipe(\n                tap(_ => this.notify(this.sharedService.getTranslationWithData('PROJECT.FEATCHPROJECTBYID', { value: id }), 'GET')),\n                catchError(this.handleError(this.sharedService.getTranslationWithData('PROJECT.FEATCHPROJECTBYID', { value: id }), 'GET'))\n            );\n    }\n\n    /** \n     * POST: add a new Project to the database \n     */\n    addProject(project: Project): Observable<any> {\n        this.logger.log(JSON.stringify(project));\n        let UrlAction = this.projectsUrl;\n        if (environment.production)\n            UrlAction = this.projectsUrl + \"/Create\";\n\n        return this.http\n            .post<Project>(UrlAction, project, httpOptions)\n            .pipe(\n                tap((project: Project) => this.notify(this.sharedService.getTranslationWithData('PROJECT.ADDPROJECTMSG', { value: project.id }), 'POST')),\n                catchError(this.handleError('addProject', 'POST'))\n            );\n    }\n\n    /** \n     * PUT: update an existing Project to the database \n     */\n    updateProject(project: Project): Observable<any> {\n        this.logger.log(JSON.stringify(project));\n        const id = typeof project === 'number' ? project : project.id;\n        let UrlAction = this.projectsUrl;\n        if (environment.production) {\n            UrlAction = UrlAction = this.projectsUrl + \"/Update\";\n            UrlAction = `${UrlAction}/${id}`;\n        }\n        return this.http\n            .put(UrlAction, project, httpOptions)\n            .pipe(\n                tap(_ => this.notify(this.sharedService.getTranslationWithData('PROJECT.ADDPROJECTMSG', { value: project.id }), 'PUT')),\n                catchError(this.handleError('updateProject', 'PUT'))\n            );\n    }\n\n    /** \n     * DELETE: delete an existing hero from the database \n     */\n    deleteProject(project: Project | number): Observable<any> {\n        const id = typeof project === 'number' ? project : project.id;\n\n        let UrlAction = this.projectsUrl;\n        if (environment.production)\n            UrlAction = this.projectsUrl + \"/Remove\";\n\n        const url = `${UrlAction}/${id}`;\n\n        return this.http\n            .delete<Project>(url, httpOptions)\n            .pipe(\n                tap(_ => this.notify(this.sharedService.getTranslationWithData('PROJECT.DELTEPROJECTMSG', { value: id }), 'DELETE')),\n                catchError(this.handleError('deleteProject', 'DELETE'))\n            );\n    }\n\n    /**\n     * Prepare an error handler for failed HTTP requests.\n     * That handler extracts the error message and logs it.\n     * It also adds the message to the errors$ observable to which the caller\n     * may listen and react.\n     * @param operation The name/description of the operation that failed\n     * @param method The HTTP method for the failed HTTP request\n     */\n    protected handleError(operation: string, method: string) {\n        return function errorHandler(res: HttpErrorResponse) {\n            this.logger.error(res);\n            const eMsg = res.message || '';\n            const error = `${this.entityNamePlural} ${operation} Error${\n                eMsg ? ': ' + eMsg : ''\n                }`;\n            this.notify(error, method);\n        }.bind(this);\n    }\n\n    protected notify(message: string, method: string) {\n        this.toastService.openSnackBar(message, method);\n    }\n}\n","export interface Project {\n\tid: number;\n\tprojectManager: string;\n\tprojectName: string;\n\tisSetDate: boolean;\n\tstartDate?: Date;\n\tendDate?: Date;\n\tpriority: string;\n\tcontactId?: number;\n}\n\nexport class ProjectInfo implements Project {\n\tconstructor(public projectName: string, public id: number,\n\t\tpublic isSetDate: boolean, public priority: string, public projectManager: string, public startdDate?: Date,\n\t\tpublic endDate?: Date) { }\n}\n\n\nexport class Manager {\n\tfullName: string;\n\tid: number;\n}","export class managerModel {\r\n    id: number;\r\n    fullName: string;\r\n}","export class projectInfoModel {\r\n    id: number;\r\n    projectName: string;\r\n}"],"sourceRoot":""}