{"version":3,"sources":["webpack:///./src/app/core/index.ts","webpack:///./src/app/core/shared-function.service.ts","webpack:///./src/app/features/contacts/contact-detail/contact-detail.component.html","webpack:///./src/app/features/contacts/contact-detail/contact-detail.component.scss","webpack:///./src/app/features/contacts/contact-detail/contact-detail.component.ts","webpack:///./src/app/features/contacts/contact-list/contact-list.component.html","webpack:///./src/app/features/contacts/contact-list/contact-list.component.scss","webpack:///./src/app/features/contacts/contact-list/contact-list.component.ts","webpack:///./src/app/features/contacts/contacts-routing.module.ts","webpack:///./src/app/features/contacts/contacts.module.ts","webpack:///./src/app/features/contacts/new-contact/new-contact.component.html","webpack:///./src/app/features/contacts/new-contact/new-contact.component.scss","webpack:///./src/app/features/contacts/new-contact/new-contact.component.ts","webpack:///./src/app/features/contacts/shared/contact.service.ts","webpack:///./src/app/shared/models/managerModel.ts"],"names":[],"mappings":"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","file":"features-contacts-contacts-module.js","sourcesContent":["export { MainLayoutComponent } from './main-layout/main-layout.component';\nexport { Logger } from './logger/logger.service';\nexport { ToastService } from './toast/toast.service';\n\nexport { SharedFunctionService } from './shared-function.service';\n\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { stringify } from '@angular/core/src/util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedFunctionService {\n  constructor(private translate: TranslateService) { }\n  private getTranslationData(myKey: string) {\n    // let translation = \"\";\n    // let cTranslation = this.translate.get(myKey).subscribe(res => {\n    //   translation = res;\n    //   return translation;\n    // });\n\n    // this.translate.get('HOME.HELLO3', { value: 'world' }).subscribe((res: string) => {\n    //   console.log(res);\n    //   //=> 'hello world'\n    // });\n\n    return this.translate.get(myKey);\n  }\n  private getTranslatData(myKey: string, data: any) {\n    let tanslat = '';\n    return this.translate.get(myKey, data);\n    //   console.log(res);\n  }\n  public getTranslation(myKey: string): string {\n    let data: string = '';\n    this.getTranslationData(myKey).subscribe(res => data = res);\n    return data;\n  }\n  public getTranslationWithData(myKey: string, data: any): string {\n    let val: string = '';\n    this.getTranslatData(myKey, data).subscribe(res => val = res);\n    return val;\n  }\n\n}\n","module.exports = \"<h3 mat-dialog-title> {{'EDITUSER_PG.TITLE' | translate}} </h3>\\n\\n<mat-accordion class=\\\"example-headers-align\\\">\\n\\n    <!-- Personal Form inside Expansion Panel Personal -->\\n    <mat-expansion-panel>\\n        <mat-expansion-panel-header>\\n            <mat-panel-title>\\n                {{'EDITUSER_PG.PERSONAL' | translate}}\\n            </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <app-personal-form [form]=\\\"form\\\"></app-personal-form>\\n    </mat-expansion-panel>\\n\\n    <!-- Work Form inside Expansion Panel Work -->\\n    <!-- <mat-expansion-panel>\\n        <mat-expansion-panel-header>\\n            <mat-panel-title>\\n                Work\\n            </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <app-work-form [form]=\\\"form\\\"></app-work-form>\\n    </mat-expansion-panel> -->\\n\\n    <!-- Address Form inside Expansion Panel Work -->\\n    <!-- <mat-expansion-panel>\\n        <mat-expansion-panel-header>\\n            <mat-panel-title>\\n                Address\\n            </mat-panel-title>\\n        </mat-expansion-panel-header>\\n        <app-address-form [form]=\\\"form\\\"></app-address-form>\\n    </mat-expansion-panel> -->\\n\\n    <div class=\\\"top-15\\\" align=\\\"end\\\">\\n        <button mat-raised-button (click)=\\\"close()\\\">{{'EDITUSER_PG.CLOSE' | translate}}</button>&nbsp;\\n        <button class=\\\"btn-success\\\" mat-raised-button [disabled]=\\\"!form.valid || !form.dirty\\\"\\n            (click)=\\\"save()\\\">{{'EDITUSER_PG.SAVE' | translate}}</button>\\n    </div>\\n\\n</mat-accordion>\"","module.exports = \".example-headers-align .mat-expansion-panel-header-title,\\n.example-headers-align .mat-expansion-panel-header-description {\\n  flex-basis: 0; }\\n\\n.example-headers-align .mat-expansion-panel-header-description {\\n  justify-content: space-between;\\n  align-items: center; }\\n\\n.top-15 {\\n  padding-top: 15px; }\\n\\n.btn-success {\\n  background-color: #673ab7;\\n  color: #fff; }\\n\\n.btn-info {\\n  background-color: #b0bec5;\\n  color: #000000; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { FormControl, Validators, FormGroup } from \"@angular/forms\";\n\nimport { Contact } from '../shared/contact';\n\n@Component({\n    selector: 'app-contact-detail',\n    templateUrl: './contact-detail.component.html',\n    styleUrls: ['./contact-detail.component.scss']\n})\nexport class ContactDetailComponent {\n    title = 'Edit Contact';\n    form: FormGroup;\n\n    constructor(\n        private dialogRef: MatDialogRef<ContactDetailComponent>,\n        @Inject(MAT_DIALOG_DATA) public contact: Contact) { }\n\n    ngOnInit() {\n        this.buildForm();\n    }\n\n    buildForm() {\n        this.form = new FormGroup({\n            id: new FormControl(this.contact.id),\n            firstName: new FormControl(this.contact.firstName, Validators.required),\n            lastName: new FormControl(this.contact.lastName, Validators.required),\n            email: new FormControl(this.contact.email, [Validators.required, Validators.email]),\n            /* work: new FormControl(this.contact.work, Validators.required),\n             street: new FormControl(this.contact.street, Validators.required),\n             city: new FormControl(this.contact.city, Validators.required),\n             state: new FormControl(this.contact.state, Validators.required),\n             zip: new FormControl(this.contact.zip, Validators.required)*/\n        });\n    }\n\n    save() {\n        if (this.form.invalid) {\n            return;\n        }\n        this.dialogRef.close(this.form.value);\n    }\n\n    close() {\n        this.dialogRef.close(null);\n    }\n}","module.exports = \"<div layout=\\\"row\\\" layout-align=\\\"space-between center\\\" flex class=\\\"layout-align-space-between-center layout-row flex\\\">\\n    <mat-form-field>\\n        <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\"\\n            placeholder=\\\"{{'CONTACT.SEARCHCONTACTS' | translate}}\\\">\\n    </mat-form-field>&nbsp;&nbsp;\\n\\n    <!-- <button class=\\\"btn-secondary\\\" mat-mini-fab matTooltip=\\\"Add a contact\\\">\\n        <mat-icon (click)=\\\"loadAddContact();\\\" aria-label=\\\"add contact\\\">add</mat-icon> Add Contact\\n    </button> -->\\n\\n\\n    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"loadAddContact();\\\">\\n        <mat-icon aria-label=\\\"add contact\\\">contacts</mat-icon> {{'CONTACT.ADDUSER' | translate}}\\n    </button>\\n\\n    <div [hidden]=\\\"hideAddContact\\\">\\n        <app-new-contact (sentEvent)=\\\"receiveSuccess($event)\\\"></app-new-contact>\\n    </div>\\n\\n</div>\\n\\n<div class=\\\"basic-container mat-elevation-z8\\\">\\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort matSortActive=\\\"id\\\" matSortDirection=\\\"desc\\\" matSortDisableClear>\\n\\n        <!-- Id Column -->\\n        <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>ID</th>\\n            <td mat-cell *matCellDef=\\\"let contact\\\">{{ contact.id }}</td>\\n        </ng-container>\\n\\n        <!-- Name Column -->\\n        <ng-container matColumnDef=\\\"fullName\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>{{'CONTACT.NAME' | translate}}</th>\\n            <td mat-cell *matCellDef=\\\"let contact\\\">{{ getFullName(contact) }}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"email\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\\n            <td mat-cell *matCellDef=\\\"let contact\\\">{{ contact.email }}</td>\\n        </ng-container>\\n\\n        <!-- Work Type Column -->\\n        <!-- <ng-container matColumnDef=\\\"work\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Work Type</th>\\n            <td mat-cell *matCellDef=\\\"let contact\\\">{{ contact.work }}</td>\\n        </ng-container> -->\\n\\n        <!-- State Column -->\\n        <!-- <ng-container matColumnDef=\\\"state\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>State</th>\\n            <td mat-cell *matCellDef=\\\"let contact\\\">{{ contact.state }}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"address\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Address</th>\\n            <td mat-cell *matCellDef=\\\"let contact\\\">{{ getAddress(contact) }}</td>\\n        </ng-container> -->\\n\\n        <!-- Action Column -->\\n        <ng-container matColumnDef=\\\"action\\\">\\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Action</th>\\n            <td mat-cell *matCellDef=\\\"let contact\\\">\\n                <button mat-icon-button color=\\\"accent\\\" matTooltip=\\\"{{'CONTACT.EDITCONTACT' | translate}}\\\">\\n                    <mat-icon (click)=\\\"editContact(contact.id)\\\" aria-label=\\\"edit contact\\\">edit</mat-icon>\\n                </button>\\n                <button mat-icon-button color=\\\"warn\\\" matTooltip=\\\"{{'CONTACT.DELETECONTACT' | translate}}\\\">\\n                    <mat-icon (click)=\\\"deleteContact(contact)\\\" aria-label=\\\"delete contact\\\">delete_forever</mat-icon>\\n                </button>\\n            </td>\\n        </ng-container>\\n\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n    </table>\\n    <mat-paginator [pageSizeOptions]=\\\"[5, 10]\\\" showFirstLastButtons>\\n    </mat-paginator>\\n</div>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n.mat-form-field {\\n  width: 50%; }\\n\\n.btn-secondary {\\n  background-color: #ffd740;\\n  color: #000000; }\\n\\n.button-right {\\n  position: absolute;\\n  right: 45px;\\n  z-index: 1; }\\n\"","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\nimport { MatTableDataSource } from '@angular/material';\n\n//import { ConfirmedDialogComponent } from '../../../shared/dialogs/confirmed-dialog/confirmed-dialog.component';\n//import { Logger } from '../../../core/logger/logger.service';\nimport { ConfirmedDialogComponent } from '@app/shared/dialogs';\nimport { Logger } from '@app/core';\n\nimport { Contact } from '../shared/contact';\nimport { ContactDetailComponent } from '../contact-detail/contact-detail.component';\nimport { ContactService } from '../shared/contact.service'\nimport { SharedFunctionService } from '../../../core/shared-function.service';\n\n@Component({\n    selector: 'app-contact-list',\n    templateUrl: './contact-list.component.html',\n    styleUrls: ['./contact-list.component.scss']\n})\nexport class ContactListComponent implements OnInit {\n    displayedColumns: string[];\n    dataSource = new MatTableDataSource();\n    screenHeight: any;\n    screenWidth: any;\n\n    public hideAddContact = true;\n\n    loadAddContact() {\n        this.hideAddContact = !this.hideAddContact;\n    }\n\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    @ViewChild(MatSort) sort: MatSort;\n\n    @HostListener('window:resize', ['$event'])\n    onResize(event?) {\n        this.screenHeight = window.innerHeight;\n        this.screenWidth = window.innerWidth;\n        this.logger.log(`Resize() height: ${this.screenHeight}; width: ${this.screenWidth}`);\n        this.setDisplayedColumns();\n    }\n\n    constructor(\n        private contactService: ContactService,\n        private logger: Logger, private sharedService: SharedFunctionService,\n        private dialog: MatDialog) {\n\n        this.screenHeight = window.screen.height;\n        this.screenWidth = window.screen.width;\n        this.logger.log(`Init() height: ${this.screenHeight}; width: ${this.screenWidth}`);\n        this.setDisplayedColumns();\n    }\n\n    ngOnInit() {\n        this.loadContacts();\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n    }\n\n    applyFilter(filterValue: string) {\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n    }\n\n    loadContacts() {\n        this.contactService.getContacts().subscribe(data => {\n            this.dataSource.data = data;\n        });\n    }\n\n\n    receiveSuccess($event) {\n        this.loadContacts();\n        this.hideAddContact = true;\n    }\n\n    editContact(id: number): void {\n\n        this.contactService.getContact(id).subscribe(data => {\n            const dialogConfig = new MatDialogConfig();\n            dialogConfig.disableClose = true;\n            dialogConfig.autoFocus = true;\n            dialogConfig.height = '300px';\n            dialogConfig.width = '450px';\n            dialogConfig.data = data;\n\n            const dialogRef = this.dialog.open(ContactDetailComponent, dialogConfig);\n            dialogRef.afterClosed().subscribe(result => {\n                if (!result) {\n                    return;\n                }\n                this.contactService.updateContact(result)\n                    .subscribe(_ => this.loadContacts());\n            });\n        });\n    }\n\n    deleteContact(contact: Contact): void {\n        // Create configuration for the dialog\n        const dialogConfig = new MatDialogConfig();\n        dialogConfig.disableClose = true;\n        dialogConfig.autoFocus = true;\n        dialogConfig.height = '200px';\n        dialogConfig.width = '400px';\n        dialogConfig.data = {\n            title: `Delete  ${contact.firstName} ${contact.lastName}`,\n            message: this.sharedService.getTranslation('CONTACT.CONFIRMTITLE')\n        };\n\n        const dialogRef = this.dialog.open(ConfirmedDialogComponent, dialogConfig);\n\n        dialogRef.afterClosed().subscribe(result => {\n            if (result) {\n                this.dataSource.data = this.dataSource.data.filter(e => e != contact);\n                this.contactService.deleteContact(contact).subscribe();\n            }\n        });\n    }\n\n    getFullName(contact: Contact): string {\n        return `${contact.firstName} ${contact.lastName}`;\n    }\n\n    // getAddress(contact: Contact): string {\n    //     return `${contact.street} ${contact.city}, ${contact.state}, ${contact.zip}`;\n    // }\n\n    /**\n     * Update a list of table columns to be displayed based on the width of the screen.\n     */\n    setDisplayedColumns() {\n        if (this.screenWidth < 420) {\n            this.displayedColumns = ['id', 'fullName', 'work', 'action'];\n        }\n        else if (this.screenWidth >= 420 && this.screenWidth <= 800) {\n            this.displayedColumns = ['id', 'fullName', 'email', 'action'];\n        }\n        else {\n            this.displayedColumns = ['id', 'fullName', 'email', 'action'];\n        }\n    }\n}\n\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { ContactListComponent } from './contact-list/contact-list.component';\nimport { NewContactComponent } from './new-contact/new-contact.component';\n\nconst contactsRoutes: Routes = [\n    // 1st Route\n    { path: '', component: ContactListComponent },\n    // 2nd Route\n    { path: 'add-contact', component: NewContactComponent }\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(contactsRoutes)\n    ],\n    exports: [\n        RouterModule\n    ]\n})\n\nexport class ContactsRoutingModule { }","import { NgModule } from '@angular/core';\n\nimport { MaterialFormsModule } from '@app/shared/forms/material-forms.module';\nimport { SharedModule } from '@app/shared/shared.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ContactDetailComponent } from './contact-detail/contact-detail.component';\nimport { ContactListComponent } from './contact-list/contact-list.component';\nimport { ContactsRoutingModule } from './contacts-routing.module';\nimport { ContactService } from './shared/contact.service';\nimport { NewContactComponent } from './new-contact/new-contact.component';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        MaterialFormsModule,\n        ContactsRoutingModule, TranslateModule\n    ],\n    declarations: [\n        ContactDetailComponent,\n        ContactListComponent,\n        NewContactComponent\n    ],\n    providers: [\n        ContactService\n    ],\n    entryComponents: [\n        ContactDetailComponent\n    ]\n})\n\nexport class ContactsModule { }\n","module.exports = \"<!-- <div layout=\\\"row\\\" layout-align=\\\"space-between center\\\" flex class=\\\"layout-align-space-between-center layout-row flex\\\">\\n    <div class=\\\"top-container\\\">\\n          <span class=\\\"md-lgn-headline\\\"></span>\\n       <button class=\\\"btn-secondary\\\" mat-mini-fab matTooltip=\\\"contacts\\\">\\n            <mat-icon aria-label=\\\"contacts\\\">Contacts</mat-icon>\\n        </button> -->\\n<!-- <h3 mat-raised-button color=\\\"accent\\\">\\n            {{ title }}\\n        </h3>\\n\\n    </div>\\n</div>   -->\\n<mat-toolbar color=\\\"primary\\\" layout=\\\"fill\\\">\\n    {{'ADDUSERPG.ADD_USER' | translate}}\\n</mat-toolbar>\\n\\n<div class=\\\"basic-container mat-elevation-z8\\\">\\n    <mat-horizontal-stepper [linear]=\\\"true\\\" #stepper>\\n\\n        <!-- Personal Form for Step 1 -->\\n        <mat-step [stepControl]=\\\"personalForm\\\">\\n            <ng-template matStepLabel> {{'ADDUSERPG.PERSONAL' | translate}} </ng-template>\\n            <app-personal-form [form]=\\\"personalForm\\\"></app-personal-form>\\n            <div>\\n                <button mat-raised-button matStepperNext type=\\\"button\\\" matTooltip=\\\"Next Step\\\"\\n                    class=\\\"btn-primary\\\">{{'STEPPERS.NEXT' | translate}} </button>\\n            </div>\\n        </mat-step>\\n\\n        <!-- Work Form for Step 1 -->\\n        <!-- <mat-step [stepControl]=\\\"workForm\\\">\\n            <ng-template matStepLabel>Work</ng-template>\\n            <app-work-form [form]=\\\"workForm\\\"></app-work-form>\\n            <div class=\\\"top-15\\\">\\n                <button mat-raised-button matStepperPrevious>Previous</button>&nbsp;\\n                <button class=\\\"btn-primary\\\" mat-raised-button matStepperNext>Next</button>\\n            </div>\\n        </mat-step> -->\\n\\n        <!-- Address Form for Step 3 -->\\n        <!-- <mat-step [stepControl]=\\\"addressForm\\\">\\n            <ng-template matStepLabel>Address</ng-template>\\n            <app-address-form [form]=\\\"addressForm\\\"></app-address-form>\\n            <div>\\n                <button mat-raised-button matStepperPrevious>Previous</button>&nbsp;\\n                <button class=\\\"btn-primary\\\" mat-raised-button matStepperNext>Next</button>\\n            </div>\\n        </mat-step> -->\\n\\n        <!-- Result Form for Step 4 -->\\n        <mat-step>\\n            <ng-template matStepLabel>{{'ADDUSERPG.REVIEW' | translate}}</ng-template>\\n            <app-result-form [formData]=\\\"getContact()\\\"></app-result-form>\\n            <div class=\\\"top-15\\\">\\n                <button mat-raised-button matStepperPrevious>{{'STEPPERS.PREIVIOUS' | translate}} </button>&nbsp;\\n                <button class=\\\"btn-success\\\" mat-raised-button cdkFocusInitial\\n                    (click)=\\\"save()\\\">{{'ADDUSERPG.SAVE' | translate}} </button>\\n            </div>\\n        </mat-step>\\n\\n    </mat-horizontal-stepper>\\n</div>\"","module.exports = \".top-container {\\n  margin-right: 10px;\\n  margin-top: 30px;\\n  margin-bottom: 30px; }\\n\\n.md-lgn-headline {\\n  font-size: 16px;\\n  padding-top: 30px;\\n  padding-right: 10px;\\n  font-weight: 600; }\\n\\n.top-15 {\\n  padding-top: 15px; }\\n\\n.btn-primary {\\n  background-color: #55acee;\\n  color: #fff; }\\n\\n.btn-secondary {\\n  background-color: #ffd740;\\n  color: #000000; }\\n\\n.btn-success {\\n  background-color: #673ab7;\\n  color: #fff; }\\n\\n.btn-info {\\n  background-color: #b0bec5;\\n  color: #000000; }\\n\"","import { Component, OnInit, EventEmitter, Output, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n//import { Logger } from '../../../core/logger/logger.service';\nimport { Logger } from '@app/core';\n\nimport { Contact } from '../shared/contact';\nimport { ContactService } from '../shared/contact.service';\n\n@Component({\n    selector: 'app-new-contact'\n    , templateUrl: './new-contact.component.html',\n    styleUrls: ['./new-contact.component.scss']\n})\n\nexport class NewContactComponent implements OnInit {\n    @ViewChild('stepper') stepper;\n    personalForm: FormGroup;\n    workForm: FormGroup;\n    addressForm: FormGroup;\n    @Output() sentEvent = new EventEmitter<any>();\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private router: Router,\n        private contactService: ContactService,\n        private logger: Logger) { }\n\n    ngOnInit() {\n        this.buildPersonalForm();\n        // this.buildWorkForm();\n        //  this.buildAddressForm();\n    }\n\n    buildPersonalForm(): void {\n        this.personalForm = this.formBuilder.group({\n            'firstName': ['', Validators.required],\n            'lastName': ['', Validators.required],\n            'email': ['', [Validators.required, Validators.email]]\n        });\n    }\n\n    buildWorkForm(): void {\n        this.workForm = this.formBuilder.group({\n            'work': ['', Validators.required]\n        });\n    }\n\n    buildAddressForm(): void {\n        this.addressForm = this.formBuilder.group({\n            'street': ['', Validators.required],\n            'city': ['', Validators.required],\n            'state': ['', Validators.required],\n            'zip': ['', Validators.required],\n        });\n    }\n    reset() {\n        this.personalForm.reset();\n        //  this.workForm.reset();\n        // this.addressForm.reset();\n        this.stepper.reset();\n    }\n\n    save() {\n        if (this.invalidForms())\n            return;\n\n        const newContact = this.getContact();\n        this.logger.log(`New Contact: ${newContact}`);\n\n        this.contactService.addContact(newContact).subscribe(result => {\n            if (result) {\n                this.sentEvent.emit('');\n                this.reset();\n                // go to Contace List page\n                // this.router.navigate(['/']);\n            }\n        });\n    }\n\n    /**\n     * Return true if at least either personForm, workForm or addressForm is invalid\n     */\n    invalidForms(): boolean {\n        return (this.personalForm.invalid\n            //||    this.workForm.invalid\n            //  ||  this.addressForm.invalid\n        );\n    }\n\n    /**\n     * Return Contact instance by combining the following.\n     *   personalForm.value => firstName, lastName, email\n     *   workForm.value => work\n     *   addressForm.value => street, city, state, zip \n     */\n    getContact(): Contact {\n        return {\n            ...this.personalForm.value,\n            //   ...this.workForm.value, ...this.addressForm.value\n        };\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\n//import { environment } from '../../../../environments/environment';\n//import { Logger } from '../../../core/logger/logger.service';\nimport { environment } from '@env/environment';\nimport { Logger } from '@app/core';\nimport { ToastService } from '@app/core';\n\nimport { Contact } from './contact';\nimport { SharedFunctionService } from '../../../core';\nimport { managerModel } from '../../../shared/models/managerModel';\n\nconst httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json', 'TOKEN': environment.token })\n};\n\n@Injectable()\nexport class ContactService {\n    private baseUrl = environment.restApi;\n\n    private contactsUrl = `${this.baseUrl}Contacts`;\n    constructor(\n        private http: HttpClient,\n        private logger: Logger,\n        private sharedService: SharedFunctionService,\n        private toastService: ToastService) {\n        //   console.log('ggg')\n        //   console.log(this.sharedService.getTranslationWithData('HOME.HELLO3', { value: 'world' }));\n        //   console.log(this.sharedService.getTranslation('HOME.HELLO'));\n        //   this.logger.log('---environment---' + environment.production)\n    }\n\n\n    /** \n     * GET: get all contacts from the database \n     */\n    getContacts(): Observable<any> {\n        let UrlAction = this.contactsUrl;\n        if (environment.production)\n            UrlAction = this.contactsUrl + \"/All\";\n\n        this.logger.log(UrlAction);\n        return this.http\n            .get<Contact[]>(UrlAction, httpOptions)\n            .pipe(\n                tap(_ => this.notify(this.sharedService.getTranslation('CONTACT.GETCONTACTMSG'), 'GET')),\n                catchError(this.handleError('getContacts', 'GET'))\n            );\n\n    }\n\n    getProjectManager(): Observable<managerModel[]> {\n        let UrlAction = this.contactsUrl;\n        if (environment.production)\n            UrlAction = this.contactsUrl + \"/All\";\n\n        return this.http.get(UrlAction, httpOptions).pipe(\n            map((data: any[]) => data.map((item: any) => {\n                const model = new managerModel();\n                model.fullName = item.firstName + ' ' + item.lastName;\n                model.id = item.id;\n                return model;\n            }))\n        );\n    }\n\n    /** \n     * GET: get an existing contact from the database by an id \n     */\n    getContact(id: number): Observable<any> {\n        let UrlAction = this.contactsUrl;\n        if (environment.production)\n            UrlAction = this.contactsUrl + \"/Contact\";\n\n        // const url = `${this.contactsUrl}/${id}`;\n        const url = `${UrlAction}/${id}`;\n        return this.http\n            .get<Contact>(url, httpOptions)\n            .pipe(\n                tap(_ => this.notify(this.sharedService.getTranslationWithData('CONTACT.FEATCHCONTACTBYID', { id: id })\n                    , 'GET')),\n                catchError(this.handleError(`getContact id=${id}`, 'GET'))\n            );\n\n\n    }\n\n    /** \n     * POST: add a new contact to the database \n     */\n    addContact(contact: Contact): Observable<any> {\n        let UrlAction = this.contactsUrl;\n        if (environment.production)\n            UrlAction = this.contactsUrl + \"/Create\";\n\n        return this.http\n            .post<Contact>(UrlAction, contact, httpOptions)\n            .pipe(\n                tap((contact: Contact) => this.notify(this.sharedService.getTranslationWithData('CONTACT.ADD_CONTACT_MSG', { value: contact.id }), 'POST')),\n                catchError(this.handleError('addContact', 'POST'))\n            );\n    }\n\n    /** \n     * PUT: update an existing contact to the database \n     */\n    updateContact(contact: Contact): Observable<any> {\n        const id = typeof contact === 'number' ? contact : contact.id;\n        let UrlAction = this.contactsUrl;\n        if (environment.production) {\n            UrlAction = UrlAction = this.contactsUrl + \"/Update\";\n            UrlAction = `${UrlAction}/${id}`;\n        }\n\n        return this.http\n            .put(UrlAction, contact, httpOptions)\n            .pipe(\n                tap(_ => this.notify(this.sharedService.getTranslationWithData('CONTACT.UPDATE_CONTACT_MSG', { value: id }), 'PUT')),\n                catchError(this.handleError('updateContact', 'PUT'))\n            );\n    }\n\n    /** \n     * DELETE: delete an existing hero from the database \n     */\n    deleteContact(contact: Contact | number): Observable<any> {\n        const id = typeof contact === 'number' ? contact : contact.id;\n\n        let UrlAction = this.contactsUrl;\n        if (environment.production)\n            UrlAction = this.contactsUrl + \"/Remove\";\n\n        const url = `${UrlAction}/${id}`;\n        return this.http\n            .delete<Contact>(url, httpOptions)\n            .pipe(\n                tap(_ => this.notify(this.sharedService.getTranslationWithData('CONTACT.DELTE_CONTACT_MSG', { value: id }), 'DELETE')),\n                catchError(this.handleError('deleteContact', 'DELETE'))\n            );\n    }\n\n    /**\n     * Prepare an error handler for failed HTTP requests.\n     * That handler extracts the error message and logs it.\n     * It also adds the message to the errors$ observable to which the caller\n     * may listen and react.\n     * @param operation The name/description of the operation that failed\n     * @param method The HTTP method for the failed HTTP request\n     */\n    protected handleError(operation: string, method: string) {\n        return function errorHandler(res: HttpErrorResponse) {\n            this.logger.error(res);\n            const eMsg = res.message || '';\n            const error = `${this.entityNamePlural} ${operation} Error${\n                eMsg ? ': ' + eMsg : ''\n                }`;\n            this.notify(error, method);\n        }.bind(this);\n    }\n\n    protected notify(message: string, method: string) {\n        this.toastService.openSnackBar(message, method);\n    }\n}\n","export class managerModel {\r\n    id: number;\r\n    fullName: string;\r\n}"],"sourceRoot":""}